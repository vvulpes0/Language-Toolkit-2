Pleb Syntax

P[iecewise]L[ocal]E[xpression]B[uilder] is a minimal front-end to the Local
Language Toolkit that allows expressions in the local logic of strings with
both precedence and adjacency to be stated in a mathematically natural way.

Disclaimer: There are aspects of this version of pleb which reflect the fact
that its syntax is designed to be parsable with minimal effort on our part.
That's why it is an alpha version.  It is a tool that we have used effectively
in our own work.  Versions with more regular, more conventional and more fully
featured syntax are planned.  We are happy to get suggestions along with
bug-reports but are unlikely to be sympathetic with grumbling.

A pleb file consists of zero or more assignments and typically one bare
logical expression.  Bare expressions are taken to be assignments to the
special variable `it'.  The pleb parser (Pleb.readPleb) takes a pleb file as a
String and returns either an error or an automaton (FSA Integer String) which
accepts all and only those strings that satisfy the expression bound to `it'.
Except in unusual circumstances, there is no point in including more than one
bare expression.  Files including no bare expressions, on the other hand, are
useful in interactive contexts.

A second special variable `universe' gathers the set of all symbols that occur
in the file.  Internally, variables are bound either to sets of symbols or
uninterpreted syntax trees which are usually not compiled to automata until
the end of the parse.  The complement operation is relative to the value of
`universe' at the point of compilation.

Assignments and bare expressions can occur in any order. Variable bindings
scope from the line following their first definition until the end of the
file.  Variables (including `it' and `universe') may be redefined and, if in
scope, can be referenced in their own redefinition.

Usually the pleb parse functions will be called from plebby, the interactive
interpreter for working with pleb.  This provides mechanisms for controlling
when compilation occurs as well as accessing the functions of the Local
Language Toolkit.  The plebbyGuide includes a detailed discussion of the
semantics of PL expressions.

SPECIAL SYMBOLS
---------------
Operators and delimiters have both us-ascii and unicode variants, sometimes
more than one.  If your system is configured to use them the unicode variants
are conventional mathematical symbols.  On the other hand, if while you read
this you see lots of things like <E2><9F><A9>, you will probably want to stick
with the 7-bit ASCII; there is no need to use anything but the ASCII symbols.

#  -- comment remainder of line.  May occur wherever whitespace can occur.
   -- comments are the only context in which newlines have significance
      other than as whitespace.

(){} -- expression delimiters
{}     -- symbolset delimiters
<>⟨⟩ -- factor delimiters
, whitespace -- argument delimiters

Generally, whitespace can silently occur around delimiters.

Unless otherwise noted, in the sequel square brackets (grouping), vertical
bars (disjunction), asterisks (iteration) and words in paired angle brackets
(<named terminal>s) are part of the metalanguage.

VARIABLES
---------
There are two types of variables, those that range over sets of symbols and
those that range over expressions.

Var ::= <letter><non-delimiter>*

SymbolSet variables are bound with SymbolSetDef
Expression variables are bound with ExprDef

These have similar syntax except for the form of the value on the rhs of the
assignment (see below).

SYMBOLS
-------
SymbolSets are either sets of symbols or a BareSymbol which is, in effect, a
singleton set of symbols.

BareSymbol ::=  /<letter><non-delimiter>*
   The `/' distinguishes a BareSymbol from a Var.
   <letter> is anything categorized as letter in Unicode
    (See http://www.unicode.org/reports/tr44/#General_Category_Values)
   Note that the `/' is not a part of the symbol.  When a symbol is displayed
    the `/' is not displayed with it. 

Symbols ::= { Symbol[,Symbol]* }  -- these cannot be nested  

SymbolSet ::= Var   -- this a symbol set variable name

SymbolSetDef ::= = SymbolSet Symbols     -- this binds SymbolSet

Symbol ::= BareSymbol | SymbolSet  -- symbol sets are referenced by name

Currently Boolean operations on symbol sets are not supported

FACTORS
-------
Atomic expressions are factors which represent an underspecified fragment of a
word that is connected by adjacency, precedence or a combination of the two.
Factors can be anchored to word ends at either or both ends.

Factor ::= FreeFactor | InitFactor | FinalFactor | WordFactor

FOpen ::= < | ⟨  
FClose ::= > | ⟩

Adjacency and precedence in the context of FOpen..FClose are specified
by the delimiters between Symbols:

AdjacentSep ::= <whitespace>  -- Note that this is not optional
PrecedesSep ::= ,
Fseparator ::= AdjacentSep | PrecedesSep

AtomicFactor ::= FOpenFClose | FOpen Symbol[Fseparator Symbol]* FClose
                 -- FOpen and FClose symbols must match.
[plebbyily]
  > = LH </L /H>
  > = L--H </L,/H>
  > = someS </S>
  > :implies LH L--H
  True
  > :implies L--H LH
  False
  (Note that this is only true in the presence of symbols other than L and H
  in the universe.)
  > = universe {/L,/H}
  > :implies L--H LH
  True

Anchors are prefix operators that scope only over BareSymbols.

LAnchor ::= %| | ⋊ -- Vertical bars in `%|', `|%' and `%||%' are syntax
RAnchor ::= |% | ⋉
WAnchor ::= %||% | ⋊⋉

WAnchor is defined separately; |%%| and ⋉⋊ will not parse.
These are all prefix operators (as are all operators); </H>|% will not parse.

Anchor operators are not symbols; their effect is to restrict the denotation
of the factor, not extend it.  It may help to think of the end(s) of an
unanchored factor to be concatenated with an implicit Sigma^*.  A left anchor
trims the initial Sigma^*, a right anchor trims the final one and the word
anchor trims both.

ConcatenationOp ::= @ | ∙  -- arguments are substrings of result
DominationOp ::= @@ | ∙∙   -- arguments are subsequences of result
Foperator :: ConcatenationOp | DominationOp

These are the adjacency and precedence operators that may occur at the
expression level.  When applied to Factors they build Factors, but as a
subtype of Expressions.  They are, as usual, prefix operators.  In general,
Factors and Expressions can occur in exactly the same contexts.  Note, though
anchor operators apply only to BareFactors (those of form FOpen..Fclose) not
to Factors in general.

The results of the concatenation and domination operators may seem
counter-intuitive at first.  For example @(</L>,</H>) does not equal </L /H>,
rather  @(|%</L>,%|</H>) does. (The `,'s here separate the arguments.)

[plebbyily]
  > :equal @(</L>,</H>) </L /H> 
  False
  > :equal @(|%</L>,%|</H>) </L /H> 
  True

This can be particularly confusing when building regular expressions;
it is easy to forget that factors are not singleton strings, but rather
constraints that are satisfied by any string in which the factor occurs.

Similarly, while <>, %|<>, and |%<> are all extensionally equal and
distinct from %||%<>, concatenating any of %|<>, |%<> or %||%<> with a
factor has the same effect as concatenating <> (none whatsoever).

[plebbyily]
  > :equal <> %|<>
  True
  > :equal %|<> |%<>
  True
  > :equal |%<> %||%<>
  False
  > :equal @(%||%<>,</H>,%||%<>) </H>
  True
  > :equal @(%||%<>,%|</H>,%||%<>) %|</H>
  True
  > :equal @(%||%<>,|%</H>,%||%<>) |%</H>
  True
  > :equal @(%||%<>,%||%</H>,%||%<>) %||%</H>
  True
      
Factor ::= FreeFactor | InitialFactor | FinalFactor | WordFactor      
FreeFactor ::= AtomicFactor
               | Foperator {FreeFactor, FreeFactor}
               | Foperator {FreeFactor, InitialFactor}
               | Foperator {FinalFactor, FreeFactor}
               | Foperator {FinalFactor, InitialFactor}
InitalFactor ::= LAnchor AtomicFactor
                 | Foperator {InitalFactor, FreeFactor}
                 | Foperator {InitalFactor, InitialFactor}
                 | Foperator {WordFactor, FreeFactor}
                 | Foperator {WordFactor, InitialFactor}
FinalFactor ::= RAnchor AtomicFactor
                | Foperator {FreeFactor, FinalFactor}
                | Foperator {FreeFactor, WordFactor}
                | Foperator {FinalFactor, FinalFactor}
                | Foperator {FinalFactor, WordFactor}
WordFactor ::= LAnchor RAnchor AtomicFactor
               | Foperator {InitialFactor, FinalFactor}
               | Foperator {InitialFactor, WordFactor}
               | Foperator {WordFactor, FinalFactor}
               | Foperator {WordFactor, WordFactor}

AUTOMATON
---------
An Automaton in the context of a pleb expression tree is a Haskell expression
that evaluates to an FSA (FSA.FSA).  There is no corresponding syntax in the
logic of PL expressions.  Rather, these nodes in the expression tree are
created by the plebby interpreter when it compiles an expression or reads in
an automaton.

EXPRESSIONS
-----------
All expressions are in Polish (prefix) notation.
Unary operations are mandatorily undelimited.
N-ary operations are mandatorily delimited by `{' `}' or `(' `)'.

Expressions denote sets of strings, the set of all strings that satisfy the
expression. 

Unary Operators
---------------
Negation ::= ~ | ! | ¬
Iteration ::= * | *
UnaryOp ::= Negation | Iteration

N-ary Operators
--------------
Conjunction ::= /\ | ⋂ | ∩
Disjunction ::= \/ | ⋃ | ∪
NaryOp ::= Conjunction | Disjunction | Domination | Concatenation -- see Factors

Note that these are n-ary, not binary; this mitigates the tedium of polish
notation to some extent.  The reason that we have not directly implemented
conditionals and biconditionals is that, as they are not associative, there is
no intuitively unambiguous way to interpret them as n-ary operators.

PositiveLiteral ::= Factor | Negation NegativeLiteral
NegativeLiteral ::= Negation PositiveLiteral
Literal ::= PositiveLiteral | NegativeLiteral

Exprlist := Expr | Expr , Expr
Expr := Literal | Automaton | UnaryOp Expr |
         NaryOp { Exprlist } | NaryOp ( Exprlist )

Expression Assignment
---------------------
ExprDef ::= = Var Expr  --  This binds Var as an expression 

SYNTACTIC TYPES OF EXPRESSIONS
------------------------------
An expression is Conjunctive iff all Conjunctions occur in the scope of an even
number of Negations and all Disjunctions occur in the scope of an odd number
of negations.  An expression that is not Conjunctive is Disjunctive.

An expression is Strict iff it is Conjunctive and all Literals occur in the
scope of an odd number of Negations

An expression is coStrict iff it is Disjunctive and all Literals occur in the
scope of an even number of Negations

An expression is Testable iff Domination and Concatenation only apply to Factors
and Iteration does not occur in the expression.

An expression is Local iff it is Testable and neither DominationOp nor
PrecedesSep occurs.

An expression is Piecewise iff it is Testable and neither AdjacentSep nor
Concatenation occur and all Factors are FreeFactors

An expression is SL iff it is Strict and Local.  A stringset is Strictly Local
iff it is the denotation of an SL expression. 

An expression is coSL iff it is coStrict and Local.  A stringset is the
complement of a Strictly Local stringset iff it is the denotation of a coSL
expression.

An expression is LT iff it is Testable and Local.  A stringset is Strictly
Local iff it is the denotation of an LT expression.

An expression is SP iff it is Strict and Piecewise.  A stringset is Strictly
Piecewise iff it is the denotation of an SP expression. 

An expression is coSP iff it is coStrict and Piecewise.  A stringset is the
complement of a Strictly Piecewise stringset iff it is the denotation of a
coSP expression.

An expression is PT iff it is Testable and Piecewise.  A stringset is
Piecewise Testable iff it is the denotation of a PT expression. 

An expression is SPL iff it is Strict.  A stringset is Strictly Piecewise
Local iff it is the denotation of an SPL expression.

An expression is coSPL iff it is coStrict.  A stringset is the complement of a
Strictly Piecewise Local stringset iff it is the denotation of a coSPL
expression.

An expression is PLT iff it is Testable.  A stringset is Piecewise Locally
Testable iff it is the denotation of a PLT expression.

An expression is Star-Free iff Iteration does not occur.  A stringset is
Star-Free iff it is the denotation of an Star-Free expression. 

A stringset is Regular iff it is the denotation of a pleb expression.

A NOTE ON FACTORS AND FACTORS
-----------------------------
A factor in the model-theoretic sense is any connected finite fragment of a
model.  Factors in the syntactic sense, in contrast, are linearized.  This
means that some factors (those that are not, themselves, totally ordered)
cannot be represented directly as atomic formulae in the logic.  For example a
fragment of a word model that includes three points, labeled `a', `b', and `c'
respectively, with `a' and `b' both preceding `c' is only partially ordered.
To express it, a conjunction is required:

[plebbyily]
  > = abc /\{</A, /C>, </B, /C>}
  > = aba \/{</A, /B>, </B, /A>}
  > :implies abc aba
  True

FREQUENTLY AGGRAVATING COMPLAINTS
---------------------------------
(Just the FACs. In random order.)

o The difference between the input syntax (with `/') and display syntax
  (without) for BareSymbols can be annoying, particularly since a factor like
  <H L> will often silently fail to parse.

o `.' parses without problems in a variable name in at least some contexts,
  but not all.

o The difference between the (infix) concatenation and dominance operators in
  the context of factor definition and the (prefix) operators in the context
  of expressions can be confusing, particularly since `,' in a factor is an
  operator while `,' in an expression or a symbol set is a list separator.

o Writing regexps is cumbersome (but, then, they aren't regexps, they're
  exprs aren't they). 
