Using Factorize

In the following './' refers to the directory containing the factorize
executable.

The Local Language Toolkit includes an executable './factorize' which, given
one or more automata (in Jeff format) and a possibly empty set of non-strict
constraints will produce a factorization in terms of SL, coSL, SP, coSP and a
minimal (in number of constraints) set of the non-strict constraints.
If the stringset cannot be fully defined in these terms, an SL approximation
will be generated.

The factorization is biased in favor of the Local side of the hierarchy in the
sense that Piecewise constraints that are subsumed by Local constraints are
omitted.  The set of non-strict constraints is actually ordered, with
constraints coming earlier being preferred to those coming later.  This allows
them to be ordered with respect to complexity, yielding a minimal complexity
factorization.

This is the tool we have used to produce the factorizations of the lects of
the StressTyp2 database reported in
\cite{RogersLambertMoL17,RogersLambert18}.  In its current version it makes no
concessions to more general application.

In order to run factorize one needs two resources.  The first is a collection
of automata files, in Jeff format, that recognize the stringsets to be
factored.  Jeff-format is a (deprecated) format of the automata in StressTyp2.
It was the only format provided by the Stress Pattern Database which is one of
the progenitors of StressTyp2.  It is supported because this line of research
started before the evolution of StressTyp2.  It is the only supported format
because it suffices.

This version of factorize expects (read requires) automata filenames to be in
the StressTyp2 format 'NNN_LECTNAME' where 'NNN' is the lect number in the
database and 'LECTNAME' is a string naming the lect.  The results are written
to a files './Results/NNN'.  The contents of these files is self-explanatory
except that if the non-strict constraints section includes the line
'complete="no"' then the file contains only the SL approximation of the
stringset. 

The second is a set of prioritized constraints that comprise one's current
hypothesis about non-strict constraints that may be necessary to fully define
the stringsets.  These are contained in a directory './Compiled/' which
contains a collection of Haskell FSA files that embody the constraints, along
with a file './Compiled/constraints' which is a text file listing the
filenames, relative to './', of the constraints (i.e., 'Compiled/<basename>')
in order of preference, usually lowest complexity first.

IMPORTANT: The file './Complied/constraints' must exist, although it may be
empty.

WARNING:  _Every_ file in './Complied/constraints' will be interpreted as the
name of a compiled constraint.  Any stray lines, including empty lines, will
cause factorize to fail with a openFile warning.  This 'empty' means 0 lines,
0 characters -- no spaces or newlines. 

Jeff files for the lects in StressTyp2 are available in the
'st2-v1-archive-0415/transducers/fsasJeff/' directory of the StressTyp2
archive (available at http://st2.ullet.net/?content=page&id=19).

A set of non-strict constraints adequate for all of the StressTyp2 lects [is
provided in the './Compiled' directory of the distribution.  These also ] can
be generated by the executable 'make-non-strict-constraints' which must be run
in the './Compiled' directory (as ../make-non-strict-constraints).  This will
generate all subsets of the constraints we refer to a c89, c9x, c91, c145 and
c146 in the pleb file 'stressConstraints.pleb'.

FREQUENTLY AGGRAVATING COMPLAINTS
---------------------------------
(Just the FACs. In random order.)

o make-non-strict-constraints really ought to work <directory of automata> -->
  <directory of automata>.
o factorize could have been more brittle than it is.
